-- This script is used to initialize the database with mock data for testing purposes.
-- It creates tables for users, articles, comments, and likes, and inserts mock data into these tables.

DROP TABLE IF EXISTS like;
DROP TABLE IF EXISTS comment;
DROP TABLE IF EXISTS article;
DROP TABLE IF EXISTS user;

-- Create tables
CREATE TABLE user (
    userId INTEGER PRIMARY KEY,
    userName VARCHAR(64) UNIQUE NOT NULL,
    password VARCHAR(64) NOT NULL,
    email VARCHAR(64) NOT NULL, 
    firstName VARCHAR(64) NOT NULL,
    lastName VARCHAR(64) NOT NULL,
    dateOfBirth DATE NOT NULL,
    description TEXT  DEFAULT "I know myself so well." NOT NULL,
    avatar VARCHAR(100),
    isAdmin BOOLEAN DEFAULT FALSE NOT NULL
);

CREATE TABLE article(
    articleId INTEGER PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT NOT NULL,
    createDate TIMESTAMP NOT NULL,
    updateDate TIMESTAMP NOT NULL,
    imgUrl VARCHAR(100),
    userId INTEGER NOT NULL,
    FOREIGN KEY (userId) REFERENCES user(userId) ON DELETE CASCADE
);

CREATE TABLE comment(
    commentId INTEGER PRIMARY KEY,
    content TEXT NOT NULL,
    createDate TIMESTAMP NOT NULL,
    parentCommentId INTEGER,
    userId INTEGER NOT NULL,
    articleId INTEGER NOT NULL,
    isDeleted BOOLEAN DEFAULT FALSE NOT NULL,
    FOREIGN KEY (userId) REFERENCES user(userId) ON DELETE CASCADE,
    FOREIGN KEY (articleId) REFERENCES article(articleId) ON DELETE CASCADE,
    FOREIGN KEY (parentCommentId) REFERENCES comment(commentId) ON DELETE CASCADE
);

CREATE TABLE like(
    likeId INTEGER PRIMARY KEY,
    userId INTEGER NOT NULL,
    articleId INTEGER NOT NULL,
    UNIQUE (userId, articleId),
    FOREIGN KEY (userId) REFERENCES user(userId) ON DELETE CASCADE,
    FOREIGN KEY (articleId) REFERENCES article(articleId) ON DELETE CASCADE
);

-- Insert mock data
INSERT INTO user (userName, password, email, firstName, lastName, dateOfBirth, avatar, isAdmin) VALUES
('john_doe', '$2b$12$Yv/Cb6.FKpK6CNZRvKrCBeTNjFK1pvyHMdcaCvXQBBmp1xZSxDpei', 'john.doe@example.com', 'John', 'Doe', '1985-06-15', '/images/avatar1.jpg', FALSE),
('jane_smith', '$2b$12$CtT/UF/YyKgcbYw7DUq8o.15a.etd7RlLHM2AJ.yFEl1G7uuXaPkW', 'jane.smith@example.com', 'Jane', 'Smith', '1990-08-22', '/images/avatar2.jpg', TRUE),
('alice_jones', '$2b$12$6Sdre8XSkFpHCp2sso/gLuKx7.ctyXkZc7PP546VlnCg4rCmGRVuq', 'alice.jones@example.com', 'Alice', 'Jones', '1978-12-05', '/images/avatar3.jpg', FALSE),
('bob_brown', '$2b$12$9yuOvONQDqm5.YeITAd.L.FsyDhIblipXrl3vddN.BzjM1CWCsgIm', 'bob.brown@example.com', 'Bob', 'Brown', '1995-03-30', '/images/avatar4.jpg', FALSE),
('john_snow', '$2b$12$6Sdre8XSkFpHCp2sso/gLuKx7.ctyXkZc7PP546VlnCg4rCmGRVuq', 'john.jones@example.com', 'John', 'Snow', '1978-12-05', '/images/avatar5.jpg', FALSE);


-- Insert mock data(long article) into article table
INSERT INTO article (articleId, title, content, createDate, updateDate, imgUrl, userId) VALUES
(1,'Understanding Flexbox: Everything you need to know', 'Flexbox is a powerful layout module that allows you to create complex layouts with ease. It is a one-dimensional layout method that can handle both rows and columns, making it a versatile tool for designing responsive web pages. In this article, we will cover the basics of Flexbox, including its properties, how to use it, and some practical examples. Flexbox was introduced in CSS3 to improve upon the limitations of traditional layout methods like float and positioning. The main idea behind Flexbox is to provide a container that automatically arranges its children elements in a predictable way, even when their sizes are unknown or dynamic. One of the core concepts of Flexbox is the flex container, which is an element with the display property set to flex. This container houses flex items, which are the direct children of the container. Flexbox offers several properties that control the layout and alignment of flex items within the container. Some of the key properties include flex-direction, justify-content, align-items, and flex-wrap. The flex-direction property specifies the direction in which the flex items are placed within the container. It can be set to row, column, row-reverse, or column-reverse. The justify-content property aligns the flex items along the main axis, while the align-items property aligns them along the cross axis. Flex-wrap determines whether the flex items should wrap onto multiple lines or stay on a single line. Using these properties, you can create a wide range of layouts with minimal effort. For example, you can center elements both horizontally and vertically, create equal-width columns, or build complex grids. Flexbox also provides a flexible sizing model, allowing you to specify how much space each flex item should take up relative to its siblings. In addition to these core properties, Flexbox offers advanced features like nested flex containers, order property for rearranging items, and the ability to align individual items differently from the rest. By mastering Flexbox, you can create responsive layouts that adapt to different screen sizes and orientations, ensuring a consistent user experience across devices. Whether you are building a simple navigation bar or a complex web application, Flexbox is an essential tool for any web developer.', 1704103200000, 1704189600000, '/images/img1.jpg', 1),
(2, 'CSS Grid Layout: A Step-by-Step Guide', 'CSS Grid Layout is a two-dimensional layout system for the web. It lets you lay out items in rows and columns, and has many features that make building complex layouts straightforward. This guide will walk you through the fundamentals of CSS Grid, providing examples and practical tips along the way. CSS Grid is a layout model that enables the creation of complex and flexible web page designs. Unlike Flexbox, which is one-dimensional, CSS Grid is two-dimensional, meaning it can handle both rows and columns simultaneously. This makes it ideal for creating grid-based layouts that require precise control over the positioning and sizing of elements. One of the key features of CSS Grid is the grid container, which is an element with the display property set to grid. The grid container is divided into grid tracks, which are the rows and columns that make up the grid. These tracks are defined using the grid-template-rows and grid-template-columns properties, respectively. Each track can be assigned a specific size or set to auto to adjust based on its content. CSS Grid also introduces the concept of grid items, which are the direct children of the grid container. These items can be placed within the grid using the grid-area property, which specifies the starting and ending row and column lines for each item. Alternatively, you can use the shorthand properties grid-row and grid-column to define the position of grid items. One of the most powerful features of CSS Grid is the ability to create responsive layouts that adapt to different screen sizes. This can be achieved using the fr unit, which represents a fraction of the available space within the grid. By combining the fr unit with media queries, you can create grids that automatically adjust based on the viewport size. Another useful feature of CSS Grid is the ability to create gaps between grid items using the grid-gap property. This property allows you to specify the amount of space between rows and columns, making it easy to create visually appealing layouts with consistent spacing. CSS Grid also supports nested grids, where a grid item itself becomes a grid container. This enables the creation of complex, multi-level layouts that are easy to manage and maintain. By mastering CSS Grid, you can create flexible, responsive, and visually appealing web page designs that are easy to manage and maintain. Whether you are building a simple blog layout or a complex web application, CSS Grid is an essential tool for any web developer.', 1704276000000, 1704362400000, '/images/img2.jpg', 2),
(3, 'JavaScript ES6 Features: An Overview', 'ES6, also known as ECMAScript 2015, introduced many new features to JavaScript. These include arrow functions, classes, template literals, let and const, default parameters, and more. This article provides an overview of these new features and how to use them in your JavaScript code. One of the most notable additions in ES6 is the introduction of arrow functions. Arrow functions provide a concise syntax for writing function expressions, making your code more readable and maintainable. They also inherit the this value from the enclosing context, which can be useful when working with callbacks and event handlers. Another significant feature in ES6 is the introduction of classes. Classes provide a more straightforward syntax for creating constructor functions and working with prototypes. They also support inheritance, allowing you to create subclasses that extend the functionality of existing classes. Template literals are another powerful feature introduced in ES6. They allow you to create multi-line strings and embed expressions using a backtick (`) syntax. This makes it easier to work with dynamic content and construct complex strings without the need for concatenation. ES6 also introduces new variable declaration keywords: let and const. The let keyword allows you to declare block-scoped variables, which are only accessible within the block they are defined. This helps to avoid issues with variable hoisting and improves the readability of your code. The const keyword, on the other hand, is used to declare constants, which are variables that cannot be reassigned once they are initialized. Default parameters are another useful addition in ES6. They allow you to specify default values for function parameters, making your functions more flexible and easier to work with. If no argument is provided for a parameter with a default value, the default value will be used instead. ES6 also introduces the spread and rest operators. The spread operator (...) allows you to spread the elements of an array or object into a new array or object, making it easier to work with collections of data. The rest operator, which uses the same syntax, allows you to collect multiple function arguments into a single array. Promises are another significant feature introduced in ES6. Promises provide a cleaner and more manageable way to handle asynchronous operations, such as fetching data from an API. They allow you to chain multiple asynchronous operations together and handle errors more effectively. ES6 also includes many other features and improvements, such as the Map and Set data structures, new methods for arrays and strings, and enhancements to the Math and Number objects. By mastering these new features, you can write more efficient, readable, and maintainable JavaScript code, making your development process more enjoyable and productive.', 1704448800000, 1704535200000, '/images//images/img3.jpg', 3),
(4, 'A Comprehensive Guide to HTML5', 'HTML5 is the latest evolution of the standard that defines HTML. It introduces new elements and attributes that reflect typical usage on modern websites. In this comprehensive guide, we will explore the new features of HTML5 and how they can be used to create more interactive and dynamic web pages. One of the most significant changes in HTML5 is the introduction of new semantic elements. These elements provide more meaningful structure to your web pages, making them easier to understand and navigate for both users and search engines. Some of the new semantic elements include header, footer, article, section, and nav. These elements help to define the different parts of a web page, making it clear what each section is for. Another important feature of HTML5 is the support for multimedia elements. HTML5 introduces the audio and video elements, which allow you to embed multimedia content directly into your web pages without the need for external plugins like Flash. These elements provide a more consistent and accessible way to include multimedia content on your website. HTML5 also includes new form elements and attributes that make it easier to create user-friendly forms. Some of the new form elements include date, time, email, and range input types. These elements provide built-in validation and user interface enhancements, making it easier for users to interact with your forms. The canvas element is another powerful feature of HTML5. The canvas element allows you to draw graphics and animations directly onto your web pages using JavaScript. This makes it possible to create interactive and dynamic content, such as games, data visualizations, and custom user interfaces. HTML5 also introduces new APIs that provide enhanced functionality for web applications. Some of the new APIs include the Geolocation API, which allows you to access the user s location, and the Web Storage API, which provides a more secure and flexible way to store data on the client side. Another important aspect of HTML5 is its focus on accessibility. HTML5 includes new attributes and elements that improve the accessibility of web content for users with disabilities. For example, the role attribute allows you to define the purpose of an element, making it easier for screen readers to interpret the content. HTML5 also supports the use of ARIA (Accessible Rich Internet Applications) attributes, which provide additional information about the structure and behavior of web content. By using these attributes, you can create web pages that are more accessible and usable for all users. In addition to these new features, HTML5 also includes many other improvements and enhancements, such as better support for mobile devices, improved performance, and enhanced security. By mastering the new features of HTML5, you can create more interactive, dynamic, and accessible web pages that provide a better user experience for your visitors.', 1704621600000, 1704708000000, '/images/img4.jpg', 4),
(5, 'Building Responsive Websites with Bootstrap', 'Bootstrap is a popular framework for building responsive websites. It includes a variety of CSS and JavaScript components that make it easy to create responsive, mobile-first web pages. This article will guide you through the process of building a responsive website using Bootstrap. Bootstrap was developed by Twitter and released as an open-source project in 2011. Since then, it has become one of the most widely used front-end frameworks for web development. Bootstrap provides a set of pre-designed components and utilities that make it easy to create responsive layouts and user interfaces. One of the core features of Bootstrap is its grid system. The grid system allows you to create flexible and responsive layouts by dividing the page into a series of rows and columns. The grid system is based on a 12-column layout, which means you can create layouts that span from 1 to 12 columns. This makes it easy to create complex and flexible designs that adapt to different screen sizes. In addition to the grid system, Bootstrap includes a variety of CSS components that can be used to style your web pages. These components include navigation bars, buttons, forms, cards, and more. Each component is designed to be responsive and can be easily customized using CSS classes. Bootstrap also includes a set of JavaScript plugins that add interactivity to your web pages. These plugins include modals, tooltips, carousels, and more. The JavaScript plugins are built on top of jQuery, making them easy to integrate into your existing codebase. One of the main advantages of using Bootstrap is its mobile-first approach. This means that the framework is designed to work seamlessly on mobile devices, ensuring that your web pages look and function correctly on smaller screens. The responsive design principles built into Bootstrap make it easy to create web pages that adapt to different screen sizes and orientations. Bootstrap also includes a variety of utility classes that make it easy to apply common styles and behaviors to your elements. These utility classes include classes for spacing, alignment, visibility, and more. By using these utility classes, you can quickly and easily apply consistent styles to your web pages. In addition to the core features of Bootstrap, there is also a large and active community of developers who contribute to the project. This means that there are many third-party themes, plugins, and resources available that can help you extend the functionality of Bootstrap and customize it to meet your needs. By using Bootstrap, you can save time and effort when building responsive websites. The pre-designed components and utilities make it easy to create consistent and professional-looking web pages, while the responsive design principles ensure that your pages look great on all devices. Whether you are building a simple landing page or a complex web application, Bootstrap is a valuable tool for any web developer.', 1704794400000, 1704880800000, '/images/img5.jpg', 5),
(6, 'Understanding Asynchronous JavaScript', 'Asynchronous JavaScript allows you to execute tasks in the background without blocking the main thread. This is essential for building responsive web applications. In this article, we will explore various ways to handle asynchronous operations in JavaScript, including callbacks, promises, and async/await. Asynchronous programming is a key concept in modern web development. It allows you to perform tasks such as fetching data from an API, reading files, or performing complex calculations without freezing the user interface. This is achieved by running these tasks in the background, allowing the main thread to continue executing other code. One of the earliest methods for handling asynchronous operations in JavaScript is the use of callbacks. A callback is a function that is passed as an argument to another function and is executed once the asynchronous operation is complete. While callbacks are a simple and effective way to handle asynchronous tasks, they can lead to callback hell, a situation where multiple nested callbacks make the code difficult to read and maintain. To address the limitations of callbacks, JavaScript introduced promises in ES6. A promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. Promises provide a cleaner and more manageable way to handle asynchronous operations, allowing you to chain multiple operations together and handle errors more effectively. A promise can be in one of three states: pending, fulfilled, or rejected. When a promise is created, it is initially in the pending state. Once the asynchronous operation is complete, the promise is either fulfilled (if the operation was successful) or rejected (if an error occurred). You can use the then() method to specify what should happen when the promise is fulfilled, and the catch() method to handle any errors. Another significant advancement in asynchronous programming is the introduction of async/await in ES8. Async/await is built on top of promises and provides a more readable and synchronous-like syntax for writing asynchronous code. The async keyword is used to define a function that returns a promise, while the await keyword is used to pause the execution of the function until the promise is resolved. This allows you to write asynchronous code that looks and behaves like synchronous code, making it easier to read and maintain. In addition to these core concepts, there are several other techniques and libraries available for handling asynchronous operations in JavaScript. For example, you can use the Fetch API to make HTTP requests and handle the responses asynchronously. The Fetch API returns a promise, making it easy to integrate with other asynchronous code. Another popular library for managing asynchronous operations is RxJS (Reactive Extensions for JavaScript). RxJS provides a powerful and flexible way to handle asynchronous events and data streams using observables. Observables allow you to work with asynchronous data in a declarative manner, making it easier to compose and manage complex asynchronous workflows. By understanding and mastering these techniques, you can build more responsive and performant web applications that provide a better user experience.', 1704967200000, 1705053600000, '/images/img6.jpg', 1),
(7, 'Mastering Python for Data Science', 'Python is a versatile language used in various fields, including data science, web development, automation, and more. Its simplicity, readability, and extensive library support make it an ideal choice for data science. In this article, we will explore how to master Python for data science, covering essential libraries, tools, and best practices. Python has become the de facto language for data science due to its robust ecosystem of libraries and frameworks. Some of the most popular libraries include NumPy, Pandas, Matplotlib, and Scikit-learn. These libraries provide powerful tools for data manipulation, analysis, and visualization, making it easier to work with large datasets and extract valuable insights. NumPy is the foundational library for numerical computing in Python. It provides support for arrays, matrices, and a wide range of mathematical functions. NumPy s array-based data structures enable efficient storage and manipulation of large datasets, making it a critical tool for data scientists. Pandas is another essential library for data science. It builds on top of NumPy and provides data structures and functions specifically designed for data analysis. The core data structures in Pandas are Series (one-dimensional) and DataFrame (two-dimensional), which allow you to work with structured data in a flexible and efficient manner. Pandas also includes a variety of tools for data cleaning, transformation, and aggregation, making it easier to prepare your data for analysis. Data visualization is a crucial aspect of data science, and Matplotlib is the go-to library for creating static, animated, and interactive visualizations in Python. Matplotlib provides a wide range of plotting functions and customization options, allowing you to create informative and visually appealing charts and graphs. For more advanced visualizations, you can use libraries like Seaborn, which is built on top of Matplotlib and provides higher-level interfaces for creating complex visualizations. Scikit-learn is a powerful library for machine learning in Python. It provides a comprehensive suite of tools for building and evaluating machine learning models, including algorithms for classification, regression, clustering, and more. Scikit-learn also includes utilities for data preprocessing, model selection, and evaluation, making it easier to implement machine learning workflows. In addition to these core libraries, there are several other tools and frameworks that can enhance your data science workflow. For example, Jupyter Notebooks provide an interactive environment for writing and running Python code, making it easy to experiment with different analyses and document your findings. Anaconda is a popular distribution of Python that includes many of the essential libraries and tools for data science, simplifying the setup and management of your development environment. To master Python for data science, it is essential to develop a strong foundation in these libraries and tools. This involves not only learning the syntax and functionality of each library but also understanding how to apply them effectively to real-world data science problems. Practicing with datasets, participating in online competitions, and collaborating with other data scientists can help you hone your skills and gain practical experience. By mastering Python and its ecosystem of data science libraries, you can unlock the full potential of your data and make more informed, data-driven decisions. Whether you are analyzing trends, building predictive models, or visualizing complex data, Python provides the tools and flexibility you need to succeed in the field of data science.', 1705140000000, 1705226400000, '/images/img7.jpg', 2),
(8, 'A Guide to React Hooks', 'React Hooks provide a way to use state and other React features without writing a class. They were introduced in React 16.8 and have since become a fundamental part of React development. This article will guide you through the basics of React Hooks, including how to use them, common hooks, and best practices. One of the most important hooks in React is the useState hook. The useState hook allows you to add state to functional components. It returns an array with two elements: the current state and a function to update the state. By calling useState with an initial value, you can create a piece of state that persists across renders. Another essential hook is the useEffect hook. The useEffect hook allows you to perform side effects in functional components, such as fetching data, subscribing to events, or updating the DOM. It takes a function as its argument, which is executed after every render. You can also pass a second argument, an array of dependencies, to control when the effect runs. The useContext hook is used to access the value of a React context. Context provides a way to pass data through the component tree without having to pass props down manually at every level. By using the useContext hook, you can access the context value directly from a functional component. The useReducer hook is another powerful hook that can be used for state management. It is similar to useState but is more suitable for managing complex state logic. The useReducer hook takes a reducer function and an initial state as its arguments and returns the current state and a dispatch function. The dispatch function can be used to send actions to the reducer, which updates the state based on the action type and payload. Custom hooks are a way to extract and reuse logic from functional components. By creating a custom hook, you can encapsulate common logic and share it across multiple components. Custom hooks follow the same rules as regular hooks and can use other hooks inside them. React also provides several other hooks, such as useRef, useMemo, and useCallback, which can be used for specific use cases. The useRef hook allows you to create a mutable ref object that persists across renders. The useMemo hook is used to memoize expensive calculations, and the useCallback hook is used to memoize functions. When using hooks, it is important to follow the rules of hooks to avoid common pitfalls. The rules of hooks state that hooks should only be called at the top level of a component and not inside loops, conditions, or nested functions. This ensures that hooks are called in the same order on every render, preserving the state and behavior of the component. By mastering React Hooks, you can write more concise and maintainable code, reducing the need for class components and simplifying state management. Hooks provide a powerful way to leverage the full potential of functional components, making it easier to build complex and interactive user interfaces in React.', 1705312800000, 1705399200000, '/images/img8.jpg', 3),
(9, 'Introduction to Node.js', 'Node.js is a JavaScript runtime built on Chrome s V8 JavaScript engine. It allows you to run JavaScript on the server-side, enabling you to build scalable and high-performance web applications. In this article, we will explore the basics of Node.js, including its architecture, key features, and common use cases. One of the main advantages of Node.js is its non-blocking, event-driven architecture. This means that Node.js can handle multiple requests simultaneously without waiting for one request to complete before starting the next. This makes Node.js particularly well-suited for building real-time applications, such as chat applications, online gaming, and live streaming. Node.js uses an event loop to manage asynchronous operations. The event loop continuously checks for new events and executes the corresponding callbacks. This allows Node.js to handle a large number of concurrent connections efficiently, making it ideal for building scalable applications. Another key feature of Node.js is its single-threaded nature. Unlike traditional multi-threaded server architectures, Node.js uses a single thread to handle all incoming requests. This simplifies the development process and reduces the risk of concurrency issues, such as race conditions and deadlocks. Node.js also provides a rich ecosystem of libraries and modules through its package manager, npm. Npm is the largest package registry in the world, with over a million packages available for download. These packages cover a wide range of functionalities, from web frameworks and database drivers to authentication and testing tools. One of the most popular web frameworks for Node.js is Express.js. Express.js provides a simple and flexible way to build web applications and APIs. It includes features such as routing, middleware support, and template engines, making it easy to create robust and maintainable applications. In addition to web development, Node.js can be used for a variety of other use cases, such as building command-line tools, developing desktop applications, and creating microservices. Its versatility and performance make it a popular choice for many developers. Node.js also has strong community support, with a large number of tutorials, documentation, and online resources available. This makes it easy for developers to learn and get started with Node.js, regardless of their level of experience. By mastering Node.js, you can build scalable, high-performance web applications that can handle a large number of concurrent connections. Whether you are building a simple API or a complex real-time application, Node.js provides the tools and flexibility you need to succeed.', 1705485600000, 1705572000000, '/images/img9.jpg', 4),
(10, 'Getting Started with Svelte', 'Svelte is a modern JavaScript framework for building user interfaces. Unlike traditional frameworks, which do most of their work in the browser, Svelte shifts that work into a compile step that happens when you build your app. This results in highly optimized, framework-less JavaScript code that runs faster and has smaller bundle sizes. In this article, we will explore the basics of Svelte, including its key features, how to get started, and best practices for building Svelte applications. One of the main advantages of Svelte is its simplicity and ease of use. Svelte provides a straightforward syntax for building components, making it easy to get started with minimal boilerplate code. The core concepts of Svelte are components, props, and state. Components are the building blocks of a Svelte application, and each component is a self-contained unit that includes its markup, styles, and logic. Props allow you to pass data from a parent component to a child component, while state allows you to manage the internal state of a component. Svelte also provides a reactivity system that automatically updates the DOM when the state changes. This makes it easy to build interactive and dynamic user interfaces without the need for complex state management libraries. Another key feature of Svelte is its built-in support for animations and transitions. Svelte provides a simple and intuitive API for creating animations and transitions, making it easy to add visual effects to your applications. Svelte also includes a powerful templating system that allows you to create dynamic and reusable templates. The templating system is based on HTML, making it easy to understand and use for developers who are already familiar with HTML. One of the most powerful features of Svelte is its ability to compile your components into highly optimized JavaScript code. This means that your application will have smaller bundle sizes and faster runtime performance compared to traditional frameworks. Svelte also includes a rich ecosystem of tools and libraries that can help you build and manage your applications. For example, SvelteKit is a framework for building server-side rendered applications with Svelte, while Sapper is a framework for building progressive web apps with Svelte. By mastering Svelte, you can build highly optimized, fast, and responsive user interfaces with minimal effort. Whether you are building a small widget or a complex web application, Svelte provides the tools and features you need to succeed.', 1705658400000, 1705744800000, '/images/img10.jpg', 5),
(11, 'Exploring the Vue.js Framework', 'Vue.js is a progressive JavaScript framework...', 1705831200000, 1705917600000, '/images/img11.jpg', 1),
(12, 'The Basics of TypeScript', 'TypeScript is a typed superset of JavaScript...', 1706004000000, 1706090400000, '/images/img12.jpg', 2),
(13, 'Understanding the Document Object Model (DOM)', 'The DOM is a programming interface...', 1706176800000, 1706263200000, '/images/img13.jpg', 3),
(14, 'Building Progressive Web Apps (PWAs)', 'Progressive Web Apps are web applications...', 1706349600000, 1706436000000, '/images/img14.jpg', 4),
(15, 'An Introduction to GraphQL', 'GraphQL is a query language for APIs...', 1706522400000, 1706608800000, '/images/img15.jpg', 5),
(16, 'Diving into Docker: A Beginner s Guide', 'Docker is a platform for developing...', 1706781600000, 1706868000000, '/images/img16.jpg', 1),
(17, 'Microservices Architecture: An Overview', 'Microservices architecture allows...', 1706954400000, 1707040800000, '/images/img17.jpg', 2),
(18, 'Introduction to Kubernetes', 'Kubernetes is an open-source system for...', 1707127200000, 1707213600000, '/images/img18.jpg', 3),
(19, 'Building RESTful APIs with Express.js', 'Express.js is a web application framework...', 1707300000000, 1707386400000, '/images/img19.jpg', 4),
(20, 'Understanding Web Security', 'Web security is a critical aspect of...', 1707472800000, 1707559200000, '/images/img20.jpg', 5),
(21, 'A Guide to Responsive Web Design', 'Responsive web design is an approach to...', 1707645600000, 1707732000000, '/images/img21.jpg', 1),
(22, 'Introduction to Machine Learning', 'Machine learning is a field of artificial...', 1707818400000, 1707904800000, '/images/img22.jpg', 2),
(23, 'Exploring the Django Framework', 'Django is a high-level Python web framework...', 1707991200000, 1708077600000, '/images/img23.jpg', 3),
(24, 'Getting Started with Angular', 'Angular is a platform for building...', 1708164000000, 1708250400000, '/images/img24.jpg', 4),
(25, 'The Basics of SQL and Databases', 'SQL is a standard language for managing...', 1708336800000, 1708423200000, '/images/img25.jpg', 5),
(26, 'Introduction to DevOps', 'DevOps is a set of practices that...', 1708509600000, 1708596000000, '/images/img26.jpg', 1),
(27, 'Building Mobile Apps with Flutter', 'Flutter is an open-source UI software...', 1708682400000, 1708768800000, '/images/img27.jpg', 2),
(28, 'Understanding Blockchain Technology', 'Blockchain is a distributed ledger...', 1708855200000, 1708941600000, '/images/img28.jpg', 3),
(29, 'A Guide to Cybersecurity', 'Cybersecurity involves protecting...', 1709028000000, 1709114400000, '/images/img29.jpg', 4),
(30, 'Introduction to Artificial Intelligence', 'Artificial intelligence (AI) is the...', 1709290800000, 1709377200000, '/images/img30.jpg', 5),
(31, 'Exploring the ASP.NET Core Framework', 'ASP.NET Core is a cross-platform...', 1709463600000, 1709550000000, '/images/img31.jpg', 1),
(32, 'Building Interactive Websites with jQuery', 'jQuery is a fast, small, and...', 1709636400000, 1709722800000, '/images/img32.jpg', 2),
(33, 'Getting Started with Laravel', 'Laravel is a web application framework...', 1709809200000, 1709895600000, '/images/img33.jpg', 3),
(34, 'A Comprehensive Guide to CSS Flexbox', 'CSS Flexbox is a layout model...', 1709982000000, 1710068400000, '/images/img34.jpg', 4),
(35, 'Understanding API Integration', 'API integration is the process of...', 1710154800000, 1710241200000, '/images/img35.jpg', 5),
(36, 'Introduction to Cloud Computing', 'Cloud computing is the delivery of...', 1710327600000, 1710414000000, '/images/img36.jpg', 1),
(37, 'Building Scalable Web Applications', 'Scalable web applications are designed...', 1710500400000, 1710586800000, '/images/img37.jpg', 2),
(38, 'Exploring WebAssembly', 'WebAssembly is a binary instruction...', 1710673200000, 1710759600000, '/images/img38.jpg', 3),
(39, 'A Guide to Software Testing', 'Software testing is a process of...', 1710846000000, 1710932400000, '/images/img39.jpg', 4),
(40, 'Understanding Continuous Integration', 'Continuous integration is a practice...', 1711018800000, 1711105200000, '/images/img40.jpg', 5);



-- Insert mock data into comment table
INSERT INTO comment (content, createDate, parentCommentId, userId, articleId) VALUES
-- First article
('First comment on first article.', 1704189600000, NULL, 2, 1),
('Reply to first comment on first article.', 1704196800000, 1, 3, 1),
('Another reply to first comment on first article.', 1704204000000, 1, 4, 1),
('Reply to the second comment on first article.', 1704276000000, 2, 5, 1),
('Interesting perspective on Flexbox!', 1704193200000, NULL, 4, 1),
('Reply to interesting perspective on Flexbox!', 1704198600000, 5, 3, 1),
('Third level reply on interesting perspective on Flexbox!', 1704200400000, 6, 5, 1),
('More comments on first article.', 1704283200000, NULL, 2, 1),
('Another comment on first article.', 1704342000000, NULL, 3, 1),
('Follow-up comment on first article.', 1704345600000, NULL, 4, 1),
('Reply to follow-up comment.', 1704349200000, 10, 5, 1),
('Another reply to follow-up comment.', 1704352800000, 10, 2, 1),
('Discussion on first article.', 1704393600000, NULL, 3, 1),
('Further discussion on first article.', 1704397200000, NULL, 4, 1),
('Insightful comment on first article.', 1704456000000, NULL, 5, 1),
('Reply to insightful comment.', 1704459600000, 15, 2, 1),
('Question about first article.', 1704463200000, NULL, 3, 1),
('Answer to question about first article.', 1704466800000, 17, 4, 1),
('Another answer to question about first article.', 1704470400000, 17, 5, 1),
('Final comment on first article.', 1704531600000, NULL, 2, 1),

-- other articles
('First comment on second article.', 1704456000000, NULL, 1, 2),
('Reply to first comment on second article.', 1704459600000, 21, 2, 2),
('I found this guide very helpful. Thanks!', 1704347400000, NULL, 5, 2),
('Reply to helpful guide comment.', 1704349200000, 23, 1, 2),
('Great overview of ES6 features.', 1704390300000, NULL, 2, 3),
('Reply to ES6 overview.', 1704392100000, 25, 3, 3),
('I had trouble with HTML5 forms, but this helped.', 1704456000000, NULL, 3, 4),
('Bootstrap is my go-to framework for responsive design.', 1704480600000, NULL, 1, 5),
('Reply to Bootstrap comment.', 1704482700000, 29, 4, 5),
('Asynchronous JavaScript can be tricky, but this article simplifies it.', 1704555900000, NULL, 2, 6),
('Python is indeed versatile. Great read!', 1704585300000, NULL, 3, 7),
('Hooks make React so much easier to manage.', 1704711000000, NULL, 4, 8),
('Reply to React Hooks comment.', 1704712800000, 35, 5, 8),
('Node.js is powerful for server-side development.', 1704783600000, NULL, 5, 9),
('Svelte is an interesting framework. Need to try it out.', 1704852600000, NULL, 1, 10),
('Reply to Svelte comment.', 1704854100000, 39, 2, 10),
('Vue.js has been great for my projects.', 1704926400000, NULL, 2, 11),
('TypeScript has improved my code quality significantly.', 1705012800000, NULL, 3, 12),
('Understanding the DOM is crucial for web development.', 1705092600000, NULL, 4, 13),
('Reply to DOM understanding comment.', 1705094400000, 43, 5, 13),
('PWAs are the future of mobile web apps.', 1705160100000, NULL, 5, 14),
('GraphQL looks promising for API development.', 1705230000000, NULL, 1, 15),
('Docker has revolutionized my deployment process.', 1705353000000, NULL, 2, 16),
('Reply to Docker comment.', 1705356000000, 47, 3, 16),
('Microservices architecture is complex but worth it.', 1705419600000, NULL, 3, 17),
('Kubernetes is powerful but has a steep learning curve.', 1705492800000, NULL, 4, 18),
('Reply to Kubernetes comment.', 1705494900000, 51, 5, 18),
('Express.js makes building APIs straightforward.', 1705571100000, NULL, 5, 19),
('Web security is more important than ever.', 1705643700000, NULL, 1, 20),
('Reply to web security comment.', 1705645500000, 55, 2, 20),
('Responsive design is a must for modern websites.', 1705725900000, NULL, 2, 21),
('Machine learning is a fascinating field.', 1705800900000, NULL, 3, 22),
('Django is a robust framework for web development.', 1705884600000, NULL, 4, 23),
('Reply to Django comment.', 1705886400000, 59, 5, 23),
('Angular offers great tooling for large projects.', 1705960500000, NULL, 5, 24),
('SQL knowledge is fundamental for any developer.', 1706031900000, NULL, 1, 25),
('DevOps practices have streamlined my workflow.', 1706106000000, NULL, 2, 26),
('Reply to DevOps comment.', 1706107800000, 63, 3, 26),
('Flutter is excellent for cross-platform app development.', 1706182200000, NULL, 3, 27),
('Blockchain technology has many potential applications.', 1706259900000, NULL, 4, 28),
('Cybersecurity is a growing concern for businesses.', 1706332800000, NULL, 5, 29),
('Reply to Cybersecurity comment.', 1706334600000, 67, 1, 29),
('AI is transforming various industries.', 1706411700000, NULL, 1, 30),
('ASP.NET Core is versatile and powerful.', 1706493000000, NULL, 2, 31),
('jQuery still has its place in modern web development.', 1706566200000, NULL, 3, 32),
('Laravel has made PHP development enjoyable.', 1706640000000, NULL, 4, 33),
('Flexbox simplifies CSS layout tasks.', 1706713200000, NULL, 5, 34),
('API integration is essential for modern applications.', 1706786100000, NULL, 1, 35),
('Cloud computing has changed how we develop applications.', 1706859900000, NULL, 2, 36),
('Scalability is key for web applications.', 1706932200000, NULL, 3, 37),
('WebAssembly opens new possibilities for web development.', 1707003900000, NULL, 4, 38),
('Software testing is critical for quality assurance.', 1707076500000, NULL, 5, 39),
('Continuous integration improves development efficiency.', 1707149700000, NULL, 1, 40);



-- Insert mock data into like table
INSERT INTO like (userId, articleId) VALUES
(1, 1),
(2, 1),
(3, 2),
(4, 3),
(1, 4),
(2, 3),
(3, 4),
(4, 1);